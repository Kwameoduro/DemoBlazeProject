  name: DemoBlaze Automation Pipeline

  on:
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

  jobs:
    # ------------------------
    # 1. UI TESTS (BDD + Selenide)
    # ------------------------
    ui-tests:
      name: üß™ UI Tests
      runs-on: ubuntu-latest
      continue-on-error: false

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Build Docker image for tests
          run: docker build -t ecommerce_ui_tests .

        - name: Run tests with Docker Compose
          run: |
            docker compose up --build --abort-on-container-exit --exit-code-from tests
          env:
            COMPOSE_FILE: docker-compose.yml

        - name: Upload Allure results
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: allure-results
            path: allure-results

        - name: Upload Cucumber JSON
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: cucumber-json
            path: target/cucumber.json

        - name: Upload Cucumber HTML
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: cucumber-html
            path: target/cucumber-report.html



    # ------------------------
    # 2. PERFORMANCE TESTS (JMeter)
    # ------------------------
    performance:
      name: üìä JMeter Load Test
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Run JMeter test plan
          run: |
            mkdir -p jmeter-results
            docker run --rm -v ${{ github.workspace }}:/jmeter \
              justb4/jmeter \
              -n -t /jmeter/performance-test/PerformanceTestPlanDemoBlaze.jmx \
              -l /jmeter/jmeter-results/results.jtl \
              -e -o /jmeter/jmeter-results/html-report

        - name: Upload JMeter results
          uses: actions/upload-artifact@v4
          with:
            name: jmeter-results
            path: jmeter-results

    # ------------------------
    # 3. SECURITY TESTS (OWASP ZAP)
    # ------------------------
    security:
      name: üîí OWASP ZAP Scan
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Prepare security report folder
          run: mkdir -p security-test

        - name: Run ZAP Baseline Scan
          run: |
            docker run --rm --user root \
              -v ${{ github.workspace }}/security-test:/zap/wrk:rw \
              ghcr.io/zaproxy/zaproxy:stable \
              zap-baseline.py \
              -t https://www.demoblaze.com \
              -r zap-report.html \
              -J zap-report.json \
              -I

            # üëá Rename for GitHub Pages
            mv security-test/zap-report.html security-test/index.html

        - name: Upload ZAP Report
          uses: actions/upload-artifact@v4
          with:
            name: zap-report
            path: security-test/



    # ------------------------
    # 4. DEPLOY ALLURE REPORT
    # ------------------------
    deploy-allure-report:
      name: üöÄ Publish Allure Report
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download Allure results
          uses: actions/download-artifact@v4
          with:
            name: allure-results
            path: allure-results

        - name: Install Allure CLI
          run: |
            wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
            tar -xzf allure-2.27.0.tgz
            sudo mv allure-2.27.0 /opt/allure
            sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

        - name: Generate Allure report
          run: allure generate allure-results --clean -o allure-report

        - name: Deploy Allure report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: allure-report
            publish_branch: gh-pages
            destination_dir: allure-report

    # ------------------------
    # 5. DEPLOY JMETER REPORT
    # ------------------------
    deploy-jmeter-report:
      name: üöÄ Publish JMeter Report
      runs-on: ubuntu-latest
      needs: performance
      if: always()

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download JMeter results
          uses: actions/download-artifact@v4
          with:
            name: jmeter-results
            path: jmeter-results

        - name: Deploy JMeter report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: jmeter-results/html-report
            publish_branch: gh-pages
            destination_dir: jmeter-report

    # ------------------------
    # 6. DEPLOY ZAP REPORT
    # ------------------------
    deploy-zap-report:
      name: üöÄ Publish ZAP Security Report
      runs-on: ubuntu-latest
      needs: security
      if: always()

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download ZAP report artifact
          uses: actions/download-artifact@v4
          with:
            name: zap-report
            path: zap-report

        - name: Deploy ZAP report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: zap-report
            publish_branch: gh-pages
            destination_dir: zap-report

    # ------------------------
    # 6. DEPLOY CUCUMBER REPORT
    # ------------------------
    deploy-cucumber-report:
      name: üöÄ Publish Cucumber Report
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Prepare Cucumber report for Pages
          run: |
            mkdir -p cucumber-report
            cp target/cucumber-reports.html cucumber-report/index.html

        - name: Deploy Cucumber report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: cucumber-report
            publish_branch: gh-pages
            destination_dir: cucumber-report


      # ------------------------
    # 7. SLACK NOTIFICATION
    # ------------------------
    notify-slack:
      name: üîî Slack Notification
      runs-on: ubuntu-latest
      needs: [ ui-tests, performance, security, deploy-allure-report, deploy-jmeter-report, deploy-zap-report, deploy-cucumber-report ]
      if: always()

      steps:
        - name: Send Slack notification
          run: |
            STATUS="success"
            COLOR="good"
            EMOJI="‚úÖ"
            TITLE="*DemoBlaze Testing Pipeline Passed*"

            if [[ "${{ needs.ui-tests.result }}" == "failure" || \
                  "${{ needs.performance.result }}" == "failure" || \
                  "${{ needs.security.result }}" == "failure" ]]; then
              STATUS="completed_with_failures"
              COLOR="warning"
              EMOJI="‚ö†Ô∏è"
              TITLE="*DemoBlaze Testing Pipeline Completed with Failures*"
            fi

            if [[ "${{ needs.ui-tests.result }}" == "cancelled" || \
                  "${{ needs.performance.result }}" == "cancelled" || \
                  "${{ needs.security.result }}" == "cancelled" || \
                  "${{ needs.ui-tests.result }}" == "skipped" || \
                  "${{ needs.performance.result }}" == "skipped" || \
                  "${{ needs.security.result }}" == "skipped" ]]; then
               STATUS="failed"
               COLOR="danger"
               EMOJI="‚ùå"
               TITLE="*DemoBlaze Testing Pipeline Failed*"
            fi

            REPO_URL="https://kwameoduro.github.io/DemoBlazeProject"
            ALLURE_URL="$REPO_URL/allure-report/"
            JMETER_URL="$REPO_URL/jmeter-report/"
            ZAP_URL="$REPO_URL/zap-report/"
            CUCUMBER_URL="$REPO_URL/cucumber-report/"

            curl -X POST -H 'Content-type: application/json' --data "{
               \"attachments\": [
                 {
                   \"color\": \"$COLOR\",
                   \"blocks\": [
                     {
                       \"type\": \"section\",
                       \"text\": {
                         \"type\": \"mrkdwn\",
                         \"text\": \"$EMOJI $TITLE\n*Status:* $STATUS\" 
                       }
                     },
                     {
                       \"type\": \"section\",
                       \"fields\": [
                         {
                           \"type\": \"mrkdwn\",
                           \"text\": \"*Reports:*\\n<${ALLURE_URL}|Allure Report>\\n<${JMETER_URL}|JMeter Report>\\n<${ZAP_URL}|ZAP Security Report>\\n<${CUCUMBER_URL}|Cucumber Report>\"
                         },
                         {
                           \"type\": \"mrkdwn\",
                           \"text\": \"*Build URL:*\n$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"
                         }
                       ]
                     }
                   ]
                 }
               ]
             }" ${{ secrets.SLACK_WEBHOOK_URL }}
