  name: DemoBlaze CI/CD Pipeline

  on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main

  jobs:
    build:
      name: üõ†Ô∏è Build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up JDK 21
          uses: actions/setup-java@v4
          with:
            java-version: '21'
            distribution: 'temurin'

        - name: Build with Maven
          run: mvn clean install -DskipTests

    ui-tests:
      name: üß™ UI Tests
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up JDK 21
          uses: actions/setup-java@v4
          with:
            java-version: '21'
            distribution: 'temurin'

        - name: Run UI Tests with Maven
          run: mvn test -Pui-tests

        - name: Upload Allure Results
          uses: actions/upload-artifact@v4
          with:
            name: allure-results
            path: allure-results

        - name: Upload Cucumber Report
          uses: actions/upload-artifact@v4
          with:
            name: cucumber-report
            path: target/cucumber-report.html

    performance:
      name: ‚ö° Performance Tests
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Run JMeter Tests
          run: |
            mkdir -p jmeter-report
            echo "Simulated JMeter Report" > jmeter-report/index.html

        - name: Upload JMeter Report
          uses: actions/upload-artifact@v4
          with:
            name: jmeter-report
            path: jmeter-report

    security:
      name: üîí Security Tests
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Run ZAP Security Scan
          run: |
            mkdir -p zap-report
            echo "Simulated ZAP Security Report" > zap-report/index.html

        - name: Upload ZAP Report
          uses: actions/upload-artifact@v4
          with:
            name: zap-report
            path: zap-report

    deploy-allure-report:
      name: üöÄ Publish Allure Report
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download Allure results
          uses: actions/download-artifact@v4
          with:
            name: allure-results
            path: allure-results

        - name: Generate Allure Report
          run: |
            mkdir -p allure-report
            echo "<html><body><h1>Allure Report</h1></body></html>" > allure-report/index.html

        - name: Deploy Allure Report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: allure-report
            publish_branch: gh-pages
            destination_dir: allure-report

    deploy-jmeter-report:
      name: üöÄ Publish JMeter Report
      runs-on: ubuntu-latest
      needs: performance
      if: always()
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download JMeter report artifact
          uses: actions/download-artifact@v4
          with:
            name: jmeter-report
            path: jmeter-report

        - name: Deploy JMeter report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: jmeter-report
            publish_branch: gh-pages
            destination_dir: jmeter-report

    deploy-zap-report:
      name: üöÄ Publish ZAP Security Report
      runs-on: ubuntu-latest
      needs: security
      if: always()
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download ZAP report artifact
          uses: actions/download-artifact@v4
          with:
            name: zap-report
            path: zap-report

        - name: Deploy ZAP report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: zap-report
            publish_branch: gh-pages
            destination_dir: zap-report

    deploy-cucumber-report:
      name: üöÄ Publish Cucumber Report
      runs-on: ubuntu-latest
      needs: ui-tests
      if: always()
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download Cucumber report artifact
          uses: actions/download-artifact@v4
          with:
            name: cucumber-report
            path: cucumber-report

        - name: Prepare Cucumber report for Pages
          run: |
            mkdir -p cucumber-report-publish
            cp cucumber-report/cucumber-report.html cucumber-report-publish/index.html

        - name: Deploy Cucumber report to GitHub Pages
          uses: peaceiris/actions-gh-pages@v4
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: cucumber-report-publish
            publish_branch: gh-pages
            destination_dir: cucumber-report

    notify-slack:
      name: üîî Slack Notification
      runs-on: ubuntu-latest
      needs:
        - ui-tests
        - performance
        - security
        - deploy-allure-report
        - deploy-jmeter-report
        - deploy-zap-report
        - deploy-cucumber-report
      if: always()
      steps:
        - name: Send Slack notification
          run: |
            STATUS="success"
            COLOR="good"
            EMOJI="‚úÖ"
            TITLE="*DemoBlaze Testing Pipeline Passed*"
            
            if [[ "${{ needs.ui-tests.result }}" == "failure" || \
                  "${{ needs.performance.result }}" == "failure" || \
                  "${{ needs.security.result }}" == "failure" ]]; then
              STATUS="completed_with_failures"
              COLOR="warning"
              EMOJI="‚ö†Ô∏è"
              TITLE="*DemoBlaze Testing Pipeline Completed with Failures*"
            fi
            
            if [[ "${{ needs.ui-tests.result }}" == "cancelled" || \
                  "${{ needs.performance.result }}" == "cancelled" || \
                  "${{ needs.security.result }}" == "cancelled" || \
                  "${{ needs.ui-tests.result }}" == "skipped" || \
                  "${{ needs.performance.result }}" == "skipped" || \
                  "${{ needs.security.result }}" == "skipped" ]]; then
              STATUS="failed"
              COLOR="danger"
              EMOJI="‚ùå"
              TITLE="*DemoBlaze Testing Pipeline Failed*"
            fi
            
            REPO_URL="https://kwameoduro.github.io/DemoBlazeProject"
            ALLURE_URL="$REPO_URL/allure-report/"
            JMETER_URL="$REPO_URL/jmeter-report/"
            ZAP_URL="$REPO_URL/zap-report/"
            CUCUMBER_URL="$REPO_URL/cucumber-report/"
            
            curl -X POST -H 'Content-type: application/json' --data "{
               \"attachments\": [
                 {
                   \"color\": \"$COLOR\",
                   \"blocks\": [
                     {
                       \"type\": \"section\",
                       \"text\": {
                         \"type\": \"mrkdwn\",
                         \"text\": \"$EMOJI $TITLE\n*Status:* $STATUS\" 
                       }
                     },
                     {
                       \"type\": \"section\",
                       \"fields\": [
                         {
                           \"type\": \"mrkdwn\",
                           \"text\": \"*Reports:*\\n<${ALLURE_URL}|Allure Report>\\n<${JMETER_URL}|JMeter Report>\\n<${ZAP_URL}|ZAP Security Report>\\n<${CUCUMBER_URL}|Cucumber Report>\"
                         },
                         {
                           \"type\": \"mrkdwn\",
                           \"text\": \"*Build URL:*\n$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"
                         }
                       ]
                     }
                   ]
                 }
               ]
             }" ${{ secrets.SLACK_WEBHOOK_URL }}
